<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/controller/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/controller/UserController.java" />
              <option name="originalContent" value="package controller;&#10;&#10;import business.UserBusiness;&#10;import entity.User;&#10;&#10;public class UserController {&#10;    public User createUser(String name, String email, String password, String confirmPassword, String document) throws Exception {&#10;        return UserBusiness.createUser(name, email, password, confirmPassword, document);&#10;    }&#10;&#10;    public User login(String email, String password) throws Exception {&#10;        return UserBusiness.login(email, password);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package controller;&#10;&#10;import business.UserBusiness;&#10;import entity.User;&#10;&#10;public class UserController {&#10;    private UserBusiness userBusiness;&#10;&#10;    public UserController(UserBusiness userBusiness) {&#10;        this.userBusiness = userBusiness;&#10;    }&#10;&#10;    public User createUser(String name, String email, String password, String confirmPassword, String document) throws Exception {&#10;        return userBusiness.createUser(name, email, password, confirmPassword, document);&#10;    }&#10;&#10;    public User login(String email, String password) throws Exception {&#10;        return userBusiness.login(email, password);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/User.java" />
              <option name="updatedContent" value="package model;&#10;&#10;public class User {&#10;    private int id;&#10;    private String name;&#10;    private String email;&#10;    private String password;&#10;    private String document;&#10;&#10;    public User(int id, String name, String email, String password, String document) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.document = document;&#10;    }&#10;    public int getId() { return id; }&#10;    public String getName() { return name; }&#10;    public String getEmail() { return email; }&#10;    public String getPassword() { return password; }&#10;    public String getDocument() { return document; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/UserModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/UserModel.java" />
              <option name="originalContent" value="package model;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserModel {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public static void save(User user) throws IOException {&#10;        boolean fileExists = new File(FILE_NAME).exists();&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                out.println(&quot;id,name,email,password,document&quot;);&#10;            }&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public static List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package model;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserRepository {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public static void save(User user) throws IOException {&#10;        boolean fileExists = new File(FILE_NAME).exists();&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                out.println(&quot;id,name,email,password,document&quot;);&#10;            }&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public static List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/Model.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/Model.java" />
              <option name="originalContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;&#10;public abstract class Model&lt;T&gt; {&#10;    protected String fileName;&#10;    protected Function&lt;String[], T&gt; mapper;&#10;&#10;    public Model(String fileName, Function&lt;String[], T&gt; mapper) {&#10;        this.fileName = fileName;&#10;        this.mapper = mapper;&#10;    }&#10;&#10;    // Cria um novo registro no arquivo CSV&#10;    public void create(String[] values) throws IOException {&#10;        boolean fileExists = new File(fileName).exists();&#10;        try (FileWriter fw = new FileWriter(fileName, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                // Não escreve header, pois é abstrato&#10;            }&#10;            out.println(String.join(&quot;,&quot;, values));&#10;        }&#10;    }&#10;&#10;    // Busca todos os registros do arquivo CSV&#10;    public List&lt;T&gt; find() throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                T obj = mapper.apply(parts);&#10;                if (obj != null) {&#10;                    results.add(obj);&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;&#10;    // Busca registros que contenham todos os parâmetros informados&#10;    public List&lt;T&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                boolean match = true;&#10;                for (Map.Entry&lt;Integer, String&gt; entry : params.entrySet()) {&#10;                    int idx = entry.getKey();&#10;                    if (idx &gt;= parts.length || !parts[idx].equals(entry.getValue())) {&#10;                        match = false;&#10;                        break;&#10;                    }&#10;                }&#10;                if (match) {&#10;                    T obj = mapper.apply(parts);&#10;                    if (obj != null) {&#10;                        results.add(obj);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;&#10;public abstract class Model&lt;T&gt; {&#10;    protected String fileName;&#10;    protected Function&lt;String[], T&gt; mapper;&#10;&#10;    public Model(String fileName, Function&lt;String[], T&gt; mapper) {&#10;        this.fileName = fileName;&#10;        this.mapper = mapper;&#10;    }&#10;&#10;    // Cria um novo registro no arquivo CSV usando genéricos&#10;    public void create(T obj, Function&lt;T, String[]&gt; toArray) throws IOException {&#10;        String[] values = toArray.apply(obj);&#10;        boolean fileExists = new File(fileName).exists();&#10;        try (FileWriter fw = new FileWriter(fileName, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                // Não escreve header, pois é abstrato&#10;            }&#10;            out.println(String.join(&quot;,&quot;, values));&#10;        }&#10;    }&#10;&#10;    // Busca todos os registros do arquivo CSV&#10;    public List&lt;T&gt; find() throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                T obj = mapper.apply(parts);&#10;                if (obj != null) {&#10;                    results.add(obj);&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;&#10;    // Busca registros que contenham todos os parâmetros informados&#10;    public List&lt;T&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                boolean match = true;&#10;                for (Map.Entry&lt;Integer, String&gt; entry : params.entrySet()) {&#10;                    int idx = entry.getKey();&#10;                    if (idx &gt;= parts.length || !parts[idx].equals(entry.getValue())) {&#10;                        match = false;&#10;                        break;&#10;                    }&#10;                }&#10;                if (match) {&#10;                    T obj = mapper.apply(parts);&#10;                    if (obj != null) {&#10;                        results.add(obj);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/UserModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/UserModel.java" />
              <option name="updatedContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserModel extends Model {&#10;    public UserModel(String fileName) {&#10;        super(fileName);&#10;    }&#10;&#10;    public void create(int id, String name, String email, String password, String document) throws IOException {&#10;        String[] values = {String.valueOf(id), name, email, password, document};&#10;        super.create(values);&#10;    }&#10;&#10;    public List&lt;User&gt; find() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        List&lt;String[]&gt; rows = super.find();&#10;        for (String[] row : rows) {&#10;            if (row.length == 5) {&#10;                users.add(new User(&#10;                    Integer.parseInt(row[0]),&#10;                    row[1], row[2], row[3], row[4]&#10;                ));&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public List&lt;User&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        List&lt;String[]&gt; rows = super.find(params);&#10;        for (String[] row : rows) {&#10;            if (row.length == 5) {&#10;                users.add(new User(&#10;                    Integer.parseInt(row[0]),&#10;                    row[1], row[2], row[3], row[4]&#10;                ));&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/repository/UserRepository.java" />
              <option name="originalContent" value="package repository;&#10;&#10;import entity.User;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserRepository {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public UserRepository() {}&#10;&#10;    public void save(User user) throws IOException {&#10;        boolean fileExists = new File(FILE_NAME).exists();&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                out.println(&quot;id,name,email,password,document&quot;);&#10;            }&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package repository;&#10;&#10;import entity.User;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserRepository {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public UserRepository() {&#10;        createFileIfNotExists();&#10;    }&#10;&#10;    private void createFileIfNotExists() {&#10;        try {&#10;            File file = new File(FILE_NAME);&#10;            if (!file.exists()) {&#10;                try (FileWriter fw = new FileWriter(FILE_NAME);&#10;                     BufferedWriter bw = new BufferedWriter(fw);&#10;                     PrintWriter out = new PrintWriter(bw)) {&#10;                    out.println(&quot;id,name,email,password,document&quot;);&#10;                }&#10;            }&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Erro ao criar arquivo CSV: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public void save(User user) throws IOException {&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>