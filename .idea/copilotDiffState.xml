<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/controller/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/controller/UserController.java" />
              <option name="originalContent" value="package controller;&#10;&#10;import business.UserBusiness;&#10;import entity.User;&#10;&#10;public class UserController {&#10;    public User createUser(String name, String email, String password, String confirmPassword, String document) throws Exception {&#10;        return UserBusiness.createUser(name, email, password, confirmPassword, document);&#10;    }&#10;&#10;    public User login(String email, String password) throws Exception {&#10;        return UserBusiness.login(email, password);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package controller;&#10;&#10;import business.UserBusiness;&#10;import entity.User;&#10;&#10;public class UserController {&#10;    private UserBusiness userBusiness;&#10;&#10;    public UserController(UserBusiness userBusiness) {&#10;        this.userBusiness = userBusiness;&#10;    }&#10;&#10;    public User createUser(String name, String email, String password, String confirmPassword, String document) throws Exception {&#10;        return userBusiness.createUser(name, email, password, confirmPassword, document);&#10;    }&#10;&#10;    public User login(String email, String password) throws Exception {&#10;        return userBusiness.login(email, password);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/Main.java" />
              <option name="originalContent" value="import entity.User;&#10;import io.javalin.Javalin;&#10;import io.javalin.http.UnauthorizedResponse;&#10;import controller.AuthHttpController;&#10;import controller.ProductHttpController;&#10;import controller.AddressHttpController;&#10;import controller.OrderHttpController;&#10;import business.AuthBusiness;&#10;import business.ProductBusiness;&#10;import business.AddressBusiness;&#10;import business.OrderBusiness;&#10;import repository.RepositoryInterface;&#10;import repository.sqlite.UserRepositorySQLite;&#10;import repository.sqlite.ProductRepositorySQLite;&#10;import repository.sqlite.AddressRepositorySQLite;&#10;import repository.sqlite.OrderRepositorySQLite;&#10;import repository.sqlite.OrderItemsRepositorySQLite;&#10;import auth.SimpleTokenManager;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // Initialize SQLite repositories&#10;        RepositoryInterface&lt;User&gt; userRepository = new UserRepositorySQLite();&#10;        AuthBusiness authBusiness = new AuthBusiness(userRepository);&#10;        AuthHttpController authHttpController = new AuthHttpController(authBusiness);&#10;&#10;        ProductRepositorySQLite productRepository = new ProductRepositorySQLite();&#10;        ProductBusiness productBusiness = new ProductBusiness(productRepository);&#10;        ProductHttpController productHttpController = new ProductHttpController(productBusiness);&#10;&#10;        AddressRepositorySQLite addressRepository = new AddressRepositorySQLite();&#10;        AddressBusiness addressBusiness = new AddressBusiness(addressRepository, userRepository);&#10;        AddressHttpController addressHttpController = new AddressHttpController(addressBusiness);&#10;&#10;        OrderRepositorySQLite orderRepository = new OrderRepositorySQLite();&#10;        OrderItemsRepositorySQLite orderItemsRepository = new OrderItemsRepositorySQLite();&#10;        OrderBusiness orderBusiness = new OrderBusiness(orderRepository, orderItemsRepository, userRepository, addressRepository, productRepository);&#10;        OrderHttpController orderHttpController = new OrderHttpController(orderBusiness);&#10;&#10;        Javalin app = Javalin.create(config -&gt; {&#10;            config.showJavalinBanner = false;&#10;        }).start(7000);&#10;&#10;        // Authentication middleware for protected routes&#10;        app.before(&quot;/profile&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/products/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/products&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/addresses/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/addresses&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/users/*/addresses&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/orders/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/orders&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/protected&quot;, ctx -&gt; requireAuth(ctx));&#10;&#10;        // Public routes (no authentication required)&#10;        app.get(&quot;/health&quot;, ctx -&gt; {&#10;            ctx.json(&quot;{\&quot;status\&quot;: \&quot;OK\&quot;, \&quot;message\&quot;: \&quot;Server is running\&quot;}&quot;);&#10;        });&#10;&#10;        // Auth routes (public)&#10;        app.post(&quot;/auth/register&quot;, authHttpController::createUser);&#10;        app.post(&quot;/auth/login&quot;, authHttpController::login);&#10;        app.post(&quot;/auth/logout&quot;, authHttpController::logout);&#10;&#10;        // Protected auth routes&#10;        app.get(&quot;/profile&quot;, authHttpController::getProfile);&#10;&#10;        // Product CRUD routes (all protected)&#10;        app.post(&quot;/products&quot;, productHttpController::createProduct);&#10;        app.get(&quot;/products&quot;, productHttpController::getAllProducts);&#10;        app.get(&quot;/products/{id}&quot;, productHttpController::getProductById);&#10;        app.put(&quot;/products/{id}&quot;, productHttpController::updateProduct);&#10;        app.delete(&quot;/products/{id}&quot;, productHttpController::deleteProduct);&#10;&#10;        // User addresses route&#10;        app.get(&quot;/users/{userId}/addresses&quot;, addressHttpController::getAddressesByUserId);&#10;&#10;        // Order CRUD routes (all protected)&#10;        app.post(&quot;/orders&quot;, orderHttpController::createOrder);&#10;        app.get(&quot;/orders&quot;, orderHttpController::listOrdersByUser);&#10;        app.get(&quot;/orders/{id}&quot;, orderHttpController::getOrderById);&#10;        app.put(&quot;/orders/{id}&quot;, orderHttpController::updateOrder);&#10;        app.delete(&quot;/orders/{id}&quot;, orderHttpController::cancelOrder);&#10;&#10;        // User orders route (optional - for accessing specific user's orders)&#10;        app.get(&quot;/users/{userId}/orders&quot;, orderHttpController::listOrdersByUserId);&#10;&#10;        // Other protected routes&#10;        app.get(&quot;/protected&quot;, ctx -&gt; {&#10;            ctx.json(&quot;{\&quot;message\&quot;: \&quot;This is a protected route - you are authenticated!\&quot;}&quot;);&#10;        });&#10;&#10;        System.out.println(&quot;Server started on http://localhost:7000&quot;);&#10;        System.out.println(&quot;=== Public Routes ===&quot;);&#10;        System.out.println(&quot;Health check: GET http://localhost:7000/health&quot;);&#10;        System.out.println(&quot;Register: POST http://localhost:7000/auth/register&quot;);&#10;        System.out.println(&quot;Login: POST http://localhost:7000/auth/login&quot;);&#10;        System.out.println(&quot;Logout: POST http://localhost:7000/auth/logout&quot;);&#10;        System.out.println(&quot;=== Protected Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Profile: GET http://localhost:7000/profile&quot;);&#10;        System.out.println(&quot;=== Product CRUD Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Create Product: POST http://localhost:7000/products&quot;);&#10;        System.out.println(&quot;List Products: GET http://localhost:7000/products&quot;);&#10;        System.out.println(&quot;Get Address: GET http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;Update Address: PUT http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;Delete Address: DELETE http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;User Addresses: GET http://localhost:7000/users/{userId}/addresses&quot;);&#10;        System.out.println(&quot;Protected: GET http://localhost:7000/protected&quot;);&#10;        System.out.println(&quot;=== Order CRUD Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Create Order: POST http://localhost:7000/orders&quot;);&#10;        System.out.println(&quot;List Orders: GET http://localhost:7000/orders&quot;);&#10;        System.out.println(&quot;Get Order: GET http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;Update Order: PUT http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;Cancel Order: DELETE http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;User Orders: GET http://localhost:7000/users/{userId}/orders&quot;);&#10;        System.out.println(&quot;=== API Documentation ===&quot;);&#10;    }&#10;&#10;    private static void requireAuth(io.javalin.http.Context ctx) {&#10;        String authHeader = ctx.header(&quot;Authorization&quot;);&#10;        if (authHeader == null || !authHeader.startsWith(&quot;Bearer &quot;)) {&#10;            throw new UnauthorizedResponse(&quot;Token de autenticação obrigatório&quot;);&#10;        }&#10;&#10;        String token = authHeader.substring(7); // Remove &quot;Bearer &quot; prefix&#10;        if (!SimpleTokenManager.isValidToken(token)) {&#10;            throw new UnauthorizedResponse(&quot;Token inválido ou expirado&quot;);&#10;        }&#10;&#10;        // Store user ID in context for use in handlers&#10;        Integer userId = SimpleTokenManager.getUserIdFromToken(token);&#10;        ctx.attribute(&quot;userId&quot;, userId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import entity.User;&#10;import io.javalin.Javalin;&#10;import io.javalin.http.UnauthorizedResponse;&#10;import controller.AuthHttpController;&#10;import controller.ProductHttpController;&#10;import controller.AddressHttpController;&#10;import controller.OrderHttpController;&#10;import business.AuthBusiness;&#10;import business.ProductBusiness;&#10;import business.AddressBusiness;&#10;import business.OrderBusiness;&#10;import repository.RepositoryInterface;&#10;import repository.sqlite.UserRepositorySQLite;&#10;import repository.sqlite.ProductRepositorySQLite;&#10;import repository.sqlite.AddressRepositorySQLite;&#10;import repository.sqlite.OrderRepositorySQLite;&#10;import repository.sqlite.OrderItemsRepositorySQLite;&#10;import auth.SimpleTokenManager;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // Initialize SQLite repositories&#10;        RepositoryInterface&lt;User&gt; userRepository = new UserRepositorySQLite();&#10;        AuthBusiness authBusiness = new AuthBusiness(userRepository);&#10;        AuthHttpController authHttpController = new AuthHttpController(authBusiness);&#10;&#10;        ProductRepositorySQLite productRepository = new ProductRepositorySQLite();&#10;        ProductBusiness productBusiness = new ProductBusiness(productRepository);&#10;        ProductHttpController productHttpController = new ProductHttpController(productBusiness);&#10;&#10;        AddressRepositorySQLite addressRepository = new AddressRepositorySQLite();&#10;        AddressBusiness addressBusiness = new AddressBusiness(addressRepository, userRepository);&#10;        AddressHttpController addressHttpController = new AddressHttpController(addressBusiness);&#10;&#10;        OrderRepositorySQLite orderRepository = new OrderRepositorySQLite();&#10;        OrderItemsRepositorySQLite orderItemsRepository = new OrderItemsRepositorySQLite();&#10;        OrderBusiness orderBusiness = new OrderBusiness(orderRepository, orderItemsRepository, userRepository, addressRepository, productRepository);&#10;        OrderHttpController orderHttpController = new OrderHttpController(orderBusiness);&#10;&#10;        Javalin app = Javalin.create(config -&gt; {&#10;            config.showJavalinBanner = false;&#10;        }).start(7000);&#10;&#10;        // Authentication middleware for protected routes&#10;        app.before(&quot;/profile&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/products/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/products&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/addresses/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/addresses&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/orders/*&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/orders&quot;, ctx -&gt; requireAuth(ctx));&#10;        app.before(&quot;/protected&quot;, ctx -&gt; requireAuth(ctx));&#10;&#10;        // Public routes (no authentication required)&#10;        app.get(&quot;/health&quot;, ctx -&gt; {&#10;            ctx.json(&quot;{\&quot;status\&quot;: \&quot;OK\&quot;, \&quot;message\&quot;: \&quot;Server is running\&quot;}&quot;);&#10;        });&#10;&#10;        // Auth routes (public)&#10;        app.post(&quot;/auth/register&quot;, authHttpController::createUser);&#10;        app.post(&quot;/auth/login&quot;, authHttpController::login);&#10;        app.post(&quot;/auth/logout&quot;, authHttpController::logout);&#10;&#10;        // Protected auth routes&#10;        app.get(&quot;/profile&quot;, authHttpController::getProfile);&#10;&#10;        // Product CRUD routes (all protected)&#10;        app.post(&quot;/products&quot;, productHttpController::createProduct);&#10;        app.get(&quot;/products&quot;, productHttpController::getAllProducts);&#10;        app.get(&quot;/products/{id}&quot;, productHttpController::getProductById);&#10;        app.put(&quot;/products/{id}&quot;, productHttpController::updateProduct);&#10;        app.delete(&quot;/products/{id}&quot;, productHttpController::deleteProduct);&#10;&#10;        // User addresses route&#10;        app.get(&quot;/users/{userId}/addresses&quot;, addressHttpController::getAddressesByUserId);&#10;&#10;        // Order CRUD routes (all protected)&#10;        app.post(&quot;/orders&quot;, orderHttpController::createOrder);&#10;        app.get(&quot;/orders&quot;, orderHttpController::listOrdersByUser);&#10;        app.get(&quot;/orders/{id}&quot;, orderHttpController::getOrderById);&#10;        app.put(&quot;/orders/{id}&quot;, orderHttpController::updateOrder);&#10;        app.delete(&quot;/orders/{id}&quot;, orderHttpController::cancelOrder);&#10;&#10;        // User orders route (optional - for accessing specific user's orders)&#10;        app.get(&quot;/users/{userId}/orders&quot;, orderHttpController::listOrdersByUserId);&#10;&#10;        // Other protected routes&#10;        app.get(&quot;/protected&quot;, ctx -&gt; {&#10;            ctx.json(&quot;{\&quot;message\&quot;: \&quot;This is a protected route - you are authenticated!\&quot;}&quot;);&#10;        });&#10;&#10;        System.out.println(&quot;Server started on http://localhost:7000&quot;);&#10;        System.out.println(&quot;=== Public Routes ===&quot;);&#10;        System.out.println(&quot;Health check: GET http://localhost:7000/health&quot;);&#10;        System.out.println(&quot;Register: POST http://localhost:7000/auth/register&quot;);&#10;        System.out.println(&quot;Login: POST http://localhost:7000/auth/login&quot;);&#10;        System.out.println(&quot;Logout: POST http://localhost:7000/auth/logout&quot;);&#10;        System.out.println(&quot;=== Protected Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Profile: GET http://localhost:7000/profile&quot;);&#10;        System.out.println(&quot;=== Product CRUD Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Create Product: POST http://localhost:7000/products&quot;);&#10;        System.out.println(&quot;List Products: GET http://localhost:7000/products&quot;);&#10;        System.out.println(&quot;Get Address: GET http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;Update Address: PUT http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;Delete Address: DELETE http://localhost:7000/addresses/{id}&quot;);&#10;        System.out.println(&quot;User Addresses: GET http://localhost:7000/users/{userId}/addresses&quot;);&#10;        System.out.println(&quot;Protected: GET http://localhost:7000/protected&quot;);&#10;        System.out.println(&quot;=== Order CRUD Routes (require Authorization header) ===&quot;);&#10;        System.out.println(&quot;Create Order: POST http://localhost:7000/orders&quot;);&#10;        System.out.println(&quot;List Orders: GET http://localhost:7000/orders&quot;);&#10;        System.out.println(&quot;Get Order: GET http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;Update Order: PUT http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;Cancel Order: DELETE http://localhost:7000/orders/{id}&quot;);&#10;        System.out.println(&quot;User Orders: GET http://localhost:7000/users/{userId}/orders&quot;);&#10;        System.out.println(&quot;=== API Documentation ===&quot;);&#10;    }&#10;&#10;    private static void requireAuth(io.javalin.http.Context ctx) {&#10;        String authHeader = ctx.header(&quot;Authorization&quot;);&#10;        if (authHeader == null || !authHeader.startsWith(&quot;Bearer &quot;)) {&#10;            throw new UnauthorizedResponse(&quot;Token de autenticação obrigatório&quot;);&#10;        }&#10;&#10;        String token = authHeader.substring(7); // Remove &quot;Bearer &quot; prefix&#10;        if (!SimpleTokenManager.isValidToken(token)) {&#10;            throw new UnauthorizedResponse(&quot;Token inválido ou expirado&quot;);&#10;        }&#10;&#10;        // Store user ID in context for use in handlers&#10;        Integer userId = SimpleTokenManager.getUserIdFromToken(token);&#10;        ctx.attribute(&quot;userId&quot;, userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/User.java" />
              <option name="updatedContent" value="package model;&#10;&#10;public class User {&#10;    private int id;&#10;    private String name;&#10;    private String email;&#10;    private String password;&#10;    private String document;&#10;&#10;    public User(int id, String name, String email, String password, String document) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.document = document;&#10;    }&#10;    public int getId() { return id; }&#10;    public String getName() { return name; }&#10;    public String getEmail() { return email; }&#10;    public String getPassword() { return password; }&#10;    public String getDocument() { return document; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/model/UserModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/model/UserModel.java" />
              <option name="originalContent" value="package model;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserModel {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public static void save(User user) throws IOException {&#10;        boolean fileExists = new File(FILE_NAME).exists();&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                out.println(&quot;id,name,email,password,document&quot;);&#10;            }&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public static List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package model;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserRepository {&#10;    private static final String FILE_NAME = &quot;users.csv&quot;;&#10;&#10;    public static void save(User user) throws IOException {&#10;        boolean fileExists = new File(FILE_NAME).exists();&#10;        try (FileWriter fw = new FileWriter(FILE_NAME, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                out.println(&quot;id,name,email,password,document&quot;);&#10;            }&#10;            out.printf(&quot;%d,%s,%s,%s,%s\n&quot;, user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getDocument());&#10;        }&#10;    }&#10;&#10;    public static List&lt;User&gt; findAll() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {&#10;            String line = br.readLine(); // header&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                if (parts.length == 5) {&#10;                    users.add(new User(&#10;                        Integer.parseInt(parts[0]),&#10;                        parts[1], parts[2], parts[3], parts[4]&#10;                    ));&#10;                }&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static User findByEmail(String email) throws IOException {&#10;        for (User user : findAll()) {&#10;            if (user.getEmail().equalsIgnoreCase(email)) return user;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public static int getNextId() throws IOException {&#10;        List&lt;User&gt; users = findAll();&#10;        return users.isEmpty() ? 1 : users.get(users.size() - 1).getId() + 1;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/Model.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/Model.java" />
              <option name="originalContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;&#10;public abstract class Model&lt;T&gt; {&#10;    protected String fileName;&#10;    protected Function&lt;String[], T&gt; mapper;&#10;&#10;    public Model(String fileName, Function&lt;String[], T&gt; mapper) {&#10;        this.fileName = fileName;&#10;        this.mapper = mapper;&#10;    }&#10;&#10;    // Cria um novo registro no arquivo CSV&#10;    public void create(String[] values) throws IOException {&#10;        boolean fileExists = new File(fileName).exists();&#10;        try (FileWriter fw = new FileWriter(fileName, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                // Não escreve header, pois é abstrato&#10;            }&#10;            out.println(String.join(&quot;,&quot;, values));&#10;        }&#10;    }&#10;&#10;    // Busca todos os registros do arquivo CSV&#10;    public List&lt;T&gt; find() throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                T obj = mapper.apply(parts);&#10;                if (obj != null) {&#10;                    results.add(obj);&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;&#10;    // Busca registros que contenham todos os parâmetros informados&#10;    public List&lt;T&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                boolean match = true;&#10;                for (Map.Entry&lt;Integer, String&gt; entry : params.entrySet()) {&#10;                    int idx = entry.getKey();&#10;                    if (idx &gt;= parts.length || !parts[idx].equals(entry.getValue())) {&#10;                        match = false;&#10;                        break;&#10;                    }&#10;                }&#10;                if (match) {&#10;                    T obj = mapper.apply(parts);&#10;                    if (obj != null) {&#10;                        results.add(obj);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;import java.util.function.Function;&#10;&#10;public abstract class Model&lt;T&gt; {&#10;    protected String fileName;&#10;    protected Function&lt;String[], T&gt; mapper;&#10;&#10;    public Model(String fileName, Function&lt;String[], T&gt; mapper) {&#10;        this.fileName = fileName;&#10;        this.mapper = mapper;&#10;    }&#10;&#10;    // Cria um novo registro no arquivo CSV usando genéricos&#10;    public void create(T obj, Function&lt;T, String[]&gt; toArray) throws IOException {&#10;        String[] values = toArray.apply(obj);&#10;        boolean fileExists = new File(fileName).exists();&#10;        try (FileWriter fw = new FileWriter(fileName, true);&#10;             BufferedWriter bw = new BufferedWriter(fw);&#10;             PrintWriter out = new PrintWriter(bw)) {&#10;            if (!fileExists) {&#10;                // Não escreve header, pois é abstrato&#10;            }&#10;            out.println(String.join(&quot;,&quot;, values));&#10;        }&#10;    }&#10;&#10;    // Busca todos os registros do arquivo CSV&#10;    public List&lt;T&gt; find() throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                T obj = mapper.apply(parts);&#10;                if (obj != null) {&#10;                    results.add(obj);&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;&#10;    // Busca registros que contenham todos os parâmetros informados&#10;    public List&lt;T&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;T&gt; results = new ArrayList&lt;&gt;();&#10;        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {&#10;            String line;&#10;            while ((line = br.readLine()) != null) {&#10;                String[] parts = line.split(&quot;,&quot;);&#10;                boolean match = true;&#10;                for (Map.Entry&lt;Integer, String&gt; entry : params.entrySet()) {&#10;                    int idx = entry.getKey();&#10;                    if (idx &gt;= parts.length || !parts[idx].equals(entry.getValue())) {&#10;                        match = false;&#10;                        break;&#10;                    }&#10;                }&#10;                if (match) {&#10;                    T obj = mapper.apply(parts);&#10;                    if (obj != null) {&#10;                        results.add(obj);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return results;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/UserModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/UserModel.java" />
              <option name="updatedContent" value="package models;&#10;&#10;import java.io.*;&#10;import java.util.*;&#10;&#10;public class UserModel extends Model {&#10;    public UserModel(String fileName) {&#10;        super(fileName);&#10;    }&#10;&#10;    public void create(int id, String name, String email, String password, String document) throws IOException {&#10;        String[] values = {String.valueOf(id), name, email, password, document};&#10;        super.create(values);&#10;    }&#10;&#10;    public List&lt;User&gt; find() throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        List&lt;String[]&gt; rows = super.find();&#10;        for (String[] row : rows) {&#10;            if (row.length == 5) {&#10;                users.add(new User(&#10;                    Integer.parseInt(row[0]),&#10;                    row[1], row[2], row[3], row[4]&#10;                ));&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public List&lt;User&gt; find(Map&lt;Integer, String&gt; params) throws IOException {&#10;        List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;        List&lt;String[]&gt; rows = super.find(params);&#10;        for (String[] row : rows) {&#10;            if (row.length == 5) {&#10;                users.add(new User(&#10;                    Integer.parseInt(row[0]),&#10;                    row[1], row[2], row[3], row[4]&#10;                ));&#10;            }&#10;        }&#10;        return users;&#10;    }&#10;&#10;    public static class User {&#10;        private int id;&#10;        private String name;&#10;        private String email;&#10;        private String password;&#10;        private String document;&#10;&#10;        public User(int id, String name, String email, String password, String document) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.password = password;&#10;            this.document = document;&#10;        }&#10;&#10;        public int getId() { return id; }&#10;        public String getName() { return name; }&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;        public String getDocument() { return document; }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>